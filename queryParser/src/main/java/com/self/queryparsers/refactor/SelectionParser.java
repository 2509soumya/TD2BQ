package com.self.queryparsers.refactor;

import org.json.JSONArray;
import org.json.JSONObject;

import com.self.queryparsers.refactor.utils.ParserRegex;

public class SelectionParser {
	public static String query="SELECT CAST('WALMART' AS CHAR(20)) TENANT, '|' (CHAR(01)), FACILITY_ID  (CHAR(40)) FACILITY, '|'                                   (CHAR(01)), UPC                                  (CHAR(40)) UPC, '|'                                   (CHAR(01)), IS_PARENT                            (CHAR(01)) IS_PARENT, '|'                                   (CHAR(01)), ITEM_ID       (FORMAT '-Z(9)9')      (CHAR(11)) ITEM_ID, '|'                                   (CHAR(01)), WM_ITEM_NUMBER                       (CHAR(100)) WM_ITEM_NUMBER, '|'                                   (CHAR(01)), DESCRIPTION                          (CHAR(500)) DESCRIPTION, '|'                                   (CHAR(01)), DIVISION_NAME                        (CHAR(50)) DIVISION_NAME, '|'                                   (CHAR(01)), SUPER_DEPARTMENT_NAME                (CHAR(50)) SUPER_DEPARTMENT_NAME, '|'                                   (CHAR(01)), DEPT                                 (CHAR(50)) DEPT, '|'                                   (CHAR(01)), CAT                                  (CHAR(50)) CAT, '|'                                   (CHAR(01)), SUBSTR(SUB_CAT,0,50)                 (CHAR(50)) \\\"SUB_CAT\\\", '|$'                                  (CHAR(02)), AMT_ITEM_PRICE (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"CURRENT_RETAIL\\\", '|$'                                   (CHAR(02)), ITEM_COST      (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"ITEM_COST\\\", '|'                                   (CHAR(01)), ATS            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) ATS, '|'                                   (CHAR(01)), TRBL           (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) TRBL, '|'                                   (CHAR(01)), RIP            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) RIP, '|'                                   (CHAR(01)), OIP            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) OIP, '|'                                   (CHAR(01)), EIP            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) EIP, '|'                                   (CHAR(01)), WIP            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) WIP, '|'                                   (CHAR(01)), SUM_OH         (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) \\\"SUM_OH\\\", '|$'                                  (CHAR(02)), EXT_COST       (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"EXT_COST\\\", '|'                                   (CHAR(01)), STORE_NUM                            (CHAR(40)) \\\"STORE_NUMBER\\\", '|$'                                  (CHAR(02)), RETAIL_PRICE   (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"RETAIL_PRICE\\\", '|$'                                  (CHAR(02)), EXT_RETAIL     (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23))  \\\"EXT_RETAIL\\\", '|'                                   (CHAR(01)), VENDOR_NUM                           (CHAR(50)) \\\"VENDOR_NUMBER\\\", '|'                                   (CHAR(01)), DIM_X          (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"DIM_X\\\", '|'                                   (CHAR(01)), DIM_Y          (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"DIM_Y\\\", '|'                                   (CHAR(01)), DIM_Z          (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"DIM_Z\\\", '|'                                   (CHAR(01)), STYLE_ID_NUM                         (CHAR(50)) \\\"STYLE_ID_NUM\\\", '|'                                   (CHAR(01)), COLOR                                (CHAR(500)) COLOR, '|'                                   (CHAR(01)), SIZE                                 (CHAR(500)) SIZE, '|'                                   (CHAR(01)), WEIGHT         (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23))  WEIGHT, '|'                                   (CHAR(01)), ''                                   (CHAR(01)) BUNDLE_ID, '|'                                   (CHAR(01)), IS_CON                               (CHAR(01)) IS_CON, '|'                                   (CHAR(01)), IS_S2S_ELIGIBLE                      (CHAR(01)) IS_S2S_ELIGIBLE, '|'                                   (CHAR(01)), IS_S2S_ACTIVE                        (CHAR(01)) IS_S2S_ACTIVE, '|'                                   (CHAR(01)), IS_BACKHAUL_ELIGIBLE                 (CHAR(01)) IS_BACKHAUL_ELIGIBLE, '|'                                   (CHAR(01)), ITEM_CUBE     (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) ITEM_CUBE, '|'                                   (CHAR(01)), TOTAL_CUBE    (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) TOTAL_CUBE, '|'                                   (CHAR(01)), PARENT_UPC                           (CHAR(40)) PARENT_UPC, '|'                                   (CHAR(01)), TO_CHAR(END_DATE,'MM/DD/YYYY')       (CHAR(10)) END_DATE, '|'                                   (CHAR(01)), IS_REPLENISHABLE                     (CHAR(01)) IS_REPLENISHABLE, '|'                                   (CHAR(01)), SUBSTR(OFFR_LIFECYCLE_STS_DESC,0,1)   (CHAR(01)) DISPLAY_STATUS_DESC, '|'                                   (CHAR(01)), SUBSTR(AVLBL_STS,0,1)                (CHAR(01)) AVAILABILITY_STATUS_DESC, '|'                                   (CHAR(01)), SHPG_NODE_GRP_NM                     (CHAR(40)) DSTRBTR_GRP_NM, '|'                                   (CHAR(01)), LAST_RCPT_TS (FORMAT 'YYYY-MM-DDBHH.MI.S(6)')     (CHAR(26)) LAST_RCPT_TS, '|'                                   (CHAR(01)) FROM (SELECT Y.FACILITY_ID , Y.UPC UPC , CASE WHEN Y.UPC=Y.PARENT_UPC THEN 'Y' ELSE 'N' END IS_PARENT , Y.ITEM_ID ITEM_ID , Y.WM_ITEM_NUM WM_ITEM_NUMBER, Y.DESCRIPTION, DIVISION_NAME DIVISION_NAME , SUPER_DEPARTMENT_NAME SUPER_DEPARTMENT_NAME , DEPT, CAT CAT , SUB_CAT, Y.AMT_ITEM_PRICE, MAX(COST) ITEM_COST, SUM(ATS) ATS , SUM(TRBL) TRBL , SUM(RIP) RIP , SUM(OIP) OIP , SUM(EIP) EIP , SUM(WIP) WIP , SUM(SUM_OH) SUM_OH , SUM(EXT_COST) EXT_COST, Y.STORE_NUM, SUM(RETAIL_PRICE) RETAIL_PRICE , SUM(EXT_RETAIL) EXT_RETAIL , VENDOR_NUM , AVG(SHIP_DIM_X) DIM_X , AVG(SHIP_DIM_Y) DIM_Y , AVG(SHIP_DIM_Z) DIM_Z , Y.STYLE_ID_NUM , Y.COLOR , Y.SIZE, Y.WEIGHT, CASE WHEN Y.INBOUND_ITEM_CLASS = 'C' THEN 'Y' ELSE 'N' END IS_CON , CASE WHEN PTM.S2S_IND=1 THEN 'Y' ELSE 'N' END AS IS_S2S_ELIGIBLE, CASE WHEN PTM.S2S_ACTV_IND=1 THEN 'Y' ELSE 'N' END AS IS_S2S_ACTIVE, CASE WHEN PTM.BACKHAUL_ELIG_IND=1 THEN 'Y' ELSE 'N' END AS IS_BACKHAUL_ELIGIBLE, CAST(AVG(ITEM_CUBE) AS NUMERIC(38,7)) ITEM_CUBE , CAST(AVG(ITEM_CUBE * SUM_OH) AS NUMERIC(38,7)) TOTAL_CUBE , Y.PARENT_UPC, Y.END_DATE , CASE WHEN PTM.REPLENISHABLE_IND=1 THEN 'Y' ELSE 'N' END AS IS_REPLENISHABLE, DSL.OFFR_LIFECYCLE_STS_DESC, Y.AVLBL_STS, Y.SHPG_NODE_GRP_NM, Y.LAST_RCPT_TS FROM (SELECT ON_HAND.SHIP_NODE FACILITY_ID, ON_HAND.STORE_NUM , ON_HAND.PROD_KEY, ON_HAND.CATLG_ITEM_ID ITEM_ID , ON_HAND.WM_ITEM_NUM, ON_HAND.UPC UPC , IOH.PARENT_CHILD_FLAG , PROD_NM AS DESCRIPTION , ON_HAND.STYLE_ID_NUM , COLOR, SIZE, SUM(SUM_OH) SUM_OH , SUM(ATS) ATS , SUM(TRBL) TRBL , SUM(RIP) RIP , SUM(OIP) OIP , SUM(EIP) EIP , SUM(WIP) WIP , SUM(RTL_PRICE) SUM_AMT_ITEM_PRICE , AVG(RTL_PRICE) RETAIL_PRICE , SUM(EXT_RTL) EXT_RETAIL , SUM(COST) SUM_COST, AVG(COST) COST , SUM(EXT_COST) EXT_COST , MIN(RESERVED_QTY) RESERVE , AVG(RTL_PRICE) AMT_ITEM_PRICE , PARENT_UPC , INBOUND_ITEM_CLASS , PROD_WT AS WEIGHT , ON_HAND.VEND_NUM VENDOR_NUM , AVG(SHIP_DIM_X) SHIP_DIM_X , AVG(SHIP_DIM_Y) SHIP_DIM_Y , AVG(SHIP_DIM_Z) SHIP_DIM_Z , DIV_NM AS DIVISION_NAME, ON_HAND.SUP_DEPT_NM AS SUPER_DEPARTMENT_NAME, ON_HAND.DEPT_NM AS DEPT, ON_HAND.CATEG_NM AS CAT, ON_HAND.SUB_CATEG_NM AS SUB_CAT, AVG(CAST(SHIP_DIM_X AS NUMERIC(38,5))* CAST(SHIP_DIM_Z AS NUMERIC(38,5))/(12*12*12)) ITEM_CUBE , AVLBL_STS AVLBL_STS, MAX(CAST(TO_CHAR(OFFR_END_TS,'YYYY-MM-DD') AS DATE)) END_DATE, ODG.SHPG_NODE_GRP_NM, MAX(IPO.LAST_RCPT_TS) LAST_RCPT_TS FROM wmt-edw-prod.WW_GEC_VM.INVT_INB_ON_HAND_DTL ON_HAND LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.SHPG_NODE_RPT_CONFIG ODG ON ON_HAND.SHIP_NODE_ORG_ID = ODG.SHPG_NODE_ORG_ID AND ODG.RPT_GRP_NM = 'SC_OUTB' LEFT JOIN (SELECT CATLG_ITEM_ID,LEGACY_SLR_ID,MIN(AVLBL_STS) AVLBL_STS, MIN(RESERVED_QTY) RESERVED_QTY FROM wmt-edw-prod.WW_GEC_VM.INVT_GLBL_AVLBL GLBL LEFT JOIN wmt-edw-prod.WW_GEC_VM.INVT_ITEM_LKP ITEM_LKP ON GLBL.PROD_OFFR_ID=ITEM_LKP.SRC_ITEM_ID LEFT JOIN (SELECT INVT_ITEM_KEY,TENANT_ORG_ID, SUM(CASE WHEN INVT_TYP_ID=30 THEN QTY ELSE 0 END ) RESERVED_QTY FROM wmt-edw-prod.WW_GEC_VM.INVT_OUTBOUND_SUMM WHERE TENANT_ORG_ID=4571 AND INVT_TYP_ID=30 GROUP BY INVT_ITEM_KEY,TENANT_ORG_ID )SUMM ON ITEM_LKP.INVT_ITEM_KEY=SUMM.INVT_ITEM_KEY WHERE GLBL.CHNL='S2H' AND GLBL.LEGACY_SLR_ID=0 GROUP BY 1,2 ) GLBL_AVAIL ON ON_HAND.CATLG_ITEM_ID=GLBL_AVAIL.CATLG_ITEM_ID LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.INVT_INBOUND_ON_HAND IOH ON IOH.SHIP_NODE_ORG_ID  =ON_HAND.SHIP_NODE_ORG_ID AND IOH.REPL_STORE_ORG_ID=ON_HAND.REPL_STORE_ORG_ID AND IOH.UPC              =ON_HAND.UPC AND IOH.RPT_DT           =ON_HAND.RPT_DT LEFT JOIN (SELECT END_SHIP_NODE_ORG_ID,  UPC, MAX(LAST_RCPT_TS)LAST_RCPT_TS FROM wmt-edw-prod.WW_GEC_VM.INVT_INB_PO_OO_RDC_QTY WHERE LAST_RCPT_TS IS NOT NULL GROUP BY 1,2) IPO ON IPO.END_SHIP_NODE_ORG_ID =ON_HAND.SHIP_NODE_ORG_ID AND IPO.UPC= ON_HAND.UPC WHERE ON_HAND.RPT_DT  =CURRENT_DATE - 1 GROUP BY ON_HAND.SHIP_NODE, ON_HAND.STORE_NUM , PROD_KEY , ON_HAND.CATLG_ITEM_ID, ON_HAND.WM_ITEM_NUM, ON_HAND.UPC , IOH.PARENT_CHILD_FLAG , ON_HAND.PROD_NM, ON_HAND.STYLE_ID_NUM , COLOR, SIZE, PARENT_UPC , INBOUND_ITEM_CLASS , PROD_WT , ON_HAND.VEND_NUM , DIV_NM, ON_HAND.SUP_DEPT_NM, ON_HAND.DEPT_NM, ON_HAND.CATEG_NM, ON_HAND.SUB_CATEG_NM, AVLBL_STS, ODG.SHPG_NODE_GRP_NM ) AS Y LEFT JOIN wmt-edw-prod.WW_GEC_VM.PROD_TRANSIENT_MASTER PTM ON PTM.PROD_KEY = Y.PROD_KEY LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.PROD DI ON DI.CATLG_ITEM_ID = Y.ITEM_ID AND DI.PROD_KEY=Y.PROD_KEY LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.PROD_LIFECYCLE_STS_TRK PDST ON PDST.CATLG_ITEM_ID = Y.ITEM_ID LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.OFFR_LIFECYCLE_STS_LKP DSL ON DSL.OFFR_LIFECYCLE_STS_ID = PDST.PROD_LIFECYCLE_STS_ID GROUP BY Y.FACILITY_ID , Y.STORE_NUM, Y.VENDOR_NUM , Y.UPC , IS_PARENT , Y.ITEM_ID , Y.WM_ITEM_NUM, Y.PARENT_UPC , Y.DESCRIPTION , Y.STYLE_ID_NUM , Y.COLOR, Y.SIZE, Y.DIVISION_NAME , Y.SUPER_DEPARTMENT_NAME , Y.DEPT , Y.CAT, Y.SUB_CAT , Y.AMT_ITEM_PRICE , Y.INBOUND_ITEM_CLASS , Y.WEIGHT , PTM.S2S_IND , PTM.S2S_ACTV_IND , PTM.BACKHAUL_ELIG_IND , Y.END_DATE , PTM.REPLENISHABLE_IND, DSL.OFFR_LIFECYCLE_STS_DESC, Y.AVLBL_STS, Y.SHPG_NODE_GRP_NM, Y.LAST_RCPT_TS) AS Y1";

	
	public JSONObject parse() throws Exception {
		System.out.println("query: "+query);
		JSONObject selecttree=new JSONObject();	
		
		if(query.matches(ParserRegex.select_pattern + "(.*)")) {
			System.out.println("selection expression");
			query=query.replaceFirst(ParserRegex.select_pattern, "");
			System.out.println(query);
			
			//aggregation projection
			JSONArray aggprojobj=new JSONArray();
			
			ColumnAggregateParser columnaggparser=new ColumnAggregateParser();
			aggprojobj=columnaggparser.parse(aggprojobj);
			
			//extract columns
			ProjectionsParser proj_parser=new ProjectionsParser();
			JSONArray colsArray=proj_parser.parse();
			//extract table conditions
			TableJoinParser tab_parser=new TableJoinParser();
			JSONArray tabsArray=tab_parser.parse();
			//extract filter conditions if any
			PredicatesParser pred_parser=new PredicatesParser();
			JSONArray predicateArray=pred_parser.parse();
			//extract agg conditions if any
			JSONArray aggobj=new JSONArray();
			AggregatesParser agg_parser=new AggregatesParser();
			JSONObject groupobj=agg_parser.parse("(?i)(GROUP BY)");
			if(!groupobj.isEmpty()) {
				aggobj.put(groupobj);
			}
			JSONObject orderobj=agg_parser.parse("(?i)(ORDER BY)");
			if(!orderobj.isEmpty()) {
				aggobj.put(orderobj);
			}
			
			selecttree.put("columnaggregate", aggprojobj);
			selecttree.put("columns", colsArray);
			selecttree.put("tables", tabsArray);
			selecttree.put("predicates", predicateArray);
			selecttree.put("aggregates", aggobj);
			System.out.println("Final remaining query: "+query);
			
		}else {
			throw new Exception("Not a search expression");
		}
		
		System.out.println(selecttree.toString());
		return selecttree;
	}
	
	
	public static void main(String[] args) {
		SelectionParser select_parser=new SelectionParser();
		SelectionParser.query="SELECT CAST('WALMART' AS CHAR(20)) TENANT, '|' (CHAR(01)), FACILITY_ID  (CHAR(40)) FACILITY, '|'                                   (CHAR(01)), UPC                                  (CHAR(40)) UPC, '|'                                   (CHAR(01)), IS_PARENT                            (CHAR(01)) IS_PARENT, '|'                                   (CHAR(01)), ITEM_ID       (FORMAT '-Z(9)9')      (CHAR(11)) ITEM_ID, '|'                                   (CHAR(01)), WM_ITEM_NUMBER                       (CHAR(100)) WM_ITEM_NUMBER, '|'                                   (CHAR(01)), DESCRIPTION                          (CHAR(500)) DESCRIPTION, '|'                                   (CHAR(01)), DIVISION_NAME                        (CHAR(50)) DIVISION_NAME, '|'                                   (CHAR(01)), SUPER_DEPARTMENT_NAME                (CHAR(50)) SUPER_DEPARTMENT_NAME, '|'                                   (CHAR(01)), DEPT                                 (CHAR(50)) DEPT, '|'                                   (CHAR(01)), CAT                                  (CHAR(50)) CAT, '|'                                   (CHAR(01)), SUBSTR(SUB_CAT,0,50)                 (CHAR(50)) \\\"SUB_CAT\\\", '|$'                                  (CHAR(02)), AMT_ITEM_PRICE (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"CURRENT_RETAIL\\\", '|$'                                   (CHAR(02)), ITEM_COST      (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"ITEM_COST\\\", '|'                                   (CHAR(01)), ATS            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) ATS, '|'                                   (CHAR(01)), TRBL           (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) TRBL, '|'                                   (CHAR(01)), RIP            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) RIP, '|'                                   (CHAR(01)), OIP            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) OIP, '|'                                   (CHAR(01)), EIP            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) EIP, '|'                                   (CHAR(01)), WIP            (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) WIP, '|'                                   (CHAR(01)), SUM_OH         (FORMAT '-ZZ,ZZZ,ZZZ,ZZZ,ZZ9.9999') (CHAR(24)) \\\"SUM_OH\\\", '|$'                                  (CHAR(02)), EXT_COST       (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"EXT_COST\\\", '|'                                   (CHAR(01)), STORE_NUM                            (CHAR(40)) \\\"STORE_NUMBER\\\", '|$'                                  (CHAR(02)), RETAIL_PRICE   (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"RETAIL_PRICE\\\", '|$'                                  (CHAR(02)), EXT_RETAIL     (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23))  \\\"EXT_RETAIL\\\", '|'                                   (CHAR(01)), VENDOR_NUM                           (CHAR(50)) \\\"VENDOR_NUMBER\\\", '|'                                   (CHAR(01)), DIM_X          (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"DIM_X\\\", '|'                                   (CHAR(01)), DIM_Y          (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"DIM_Y\\\", '|'                                   (CHAR(01)), DIM_Z          (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) \\\"DIM_Z\\\", '|'                                   (CHAR(01)), STYLE_ID_NUM                         (CHAR(50)) \\\"STYLE_ID_NUM\\\", '|'                                   (CHAR(01)), COLOR                                (CHAR(500)) COLOR, '|'                                   (CHAR(01)), SIZE                                 (CHAR(500)) SIZE, '|'                                   (CHAR(01)), WEIGHT         (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23))  WEIGHT, '|'                                   (CHAR(01)), ''                                   (CHAR(01)) BUNDLE_ID, '|'                                   (CHAR(01)), IS_CON                               (CHAR(01)) IS_CON, '|'                                   (CHAR(01)), IS_S2S_ELIGIBLE                      (CHAR(01)) IS_S2S_ELIGIBLE, '|'                                   (CHAR(01)), IS_S2S_ACTIVE                        (CHAR(01)) IS_S2S_ACTIVE, '|'                                   (CHAR(01)), IS_BACKHAUL_ELIGIBLE                 (CHAR(01)) IS_BACKHAUL_ELIGIBLE, '|'                                   (CHAR(01)), ITEM_CUBE     (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) ITEM_CUBE, '|'                                   (CHAR(01)), TOTAL_CUBE    (FORMAT '-ZZ,ZZZ,ZZZ,ZZ9.9999999') (CHAR(23)) TOTAL_CUBE, '|'                                   (CHAR(01)), PARENT_UPC                           (CHAR(40)) PARENT_UPC, '|'                                   (CHAR(01)), TO_CHAR(END_DATE,'MM/DD/YYYY')       (CHAR(10)) END_DATE, '|'                                   (CHAR(01)), IS_REPLENISHABLE                     (CHAR(01)) IS_REPLENISHABLE, '|'                                   (CHAR(01)), SUBSTR(OFFR_LIFECYCLE_STS_DESC,0,1)   (CHAR(01)) DISPLAY_STATUS_DESC, '|'                                   (CHAR(01)), SUBSTR(AVLBL_STS,0,1)                (CHAR(01)) AVAILABILITY_STATUS_DESC, '|'                                   (CHAR(01)), SHPG_NODE_GRP_NM                     (CHAR(40)) DSTRBTR_GRP_NM, '|'                                   (CHAR(01)), LAST_RCPT_TS (FORMAT 'YYYY-MM-DDBHH.MI.S(6)')     (CHAR(26)) LAST_RCPT_TS, '|'                                   (CHAR(01)) FROM (SELECT Y.FACILITY_ID , Y.UPC UPC , CASE WHEN Y.UPC=Y.PARENT_UPC THEN 'Y' ELSE 'N' END IS_PARENT , Y.ITEM_ID ITEM_ID , Y.WM_ITEM_NUM WM_ITEM_NUMBER, Y.DESCRIPTION, DIVISION_NAME DIVISION_NAME , SUPER_DEPARTMENT_NAME SUPER_DEPARTMENT_NAME , DEPT, CAT CAT , SUB_CAT, Y.AMT_ITEM_PRICE, MAX(COST) ITEM_COST, SUM(ATS) ATS , SUM(TRBL) TRBL , SUM(RIP) RIP , SUM(OIP) OIP , SUM(EIP) EIP , SUM(WIP) WIP , SUM(SUM_OH) SUM_OH , SUM(EXT_COST) EXT_COST, Y.STORE_NUM, SUM(RETAIL_PRICE) RETAIL_PRICE , SUM(EXT_RETAIL) EXT_RETAIL , VENDOR_NUM , AVG(SHIP_DIM_X) DIM_X , AVG(SHIP_DIM_Y) DIM_Y , AVG(SHIP_DIM_Z) DIM_Z , Y.STYLE_ID_NUM , Y.COLOR , Y.SIZE, Y.WEIGHT, CASE WHEN Y.INBOUND_ITEM_CLASS = 'C' THEN 'Y' ELSE 'N' END IS_CON , CASE WHEN PTM.S2S_IND=1 THEN 'Y' ELSE 'N' END AS IS_S2S_ELIGIBLE, CASE WHEN PTM.S2S_ACTV_IND=1 THEN 'Y' ELSE 'N' END AS IS_S2S_ACTIVE, CASE WHEN PTM.BACKHAUL_ELIG_IND=1 THEN 'Y' ELSE 'N' END AS IS_BACKHAUL_ELIGIBLE, CAST(AVG(ITEM_CUBE) AS NUMERIC(38,7)) ITEM_CUBE , CAST(AVG(ITEM_CUBE * SUM_OH) AS NUMERIC(38,7)) TOTAL_CUBE , Y.PARENT_UPC, Y.END_DATE , CASE WHEN PTM.REPLENISHABLE_IND=1 THEN 'Y' ELSE 'N' END AS IS_REPLENISHABLE, DSL.OFFR_LIFECYCLE_STS_DESC, Y.AVLBL_STS, Y.SHPG_NODE_GRP_NM, Y.LAST_RCPT_TS FROM (SELECT ON_HAND.SHIP_NODE FACILITY_ID, ON_HAND.STORE_NUM , ON_HAND.PROD_KEY, ON_HAND.CATLG_ITEM_ID ITEM_ID , ON_HAND.WM_ITEM_NUM, ON_HAND.UPC UPC , IOH.PARENT_CHILD_FLAG , PROD_NM AS DESCRIPTION , ON_HAND.STYLE_ID_NUM , COLOR, SIZE, SUM(SUM_OH) SUM_OH , SUM(ATS) ATS , SUM(TRBL) TRBL , SUM(RIP) RIP , SUM(OIP) OIP , SUM(EIP) EIP , SUM(WIP) WIP , SUM(RTL_PRICE) SUM_AMT_ITEM_PRICE , AVG(RTL_PRICE) RETAIL_PRICE , SUM(EXT_RTL) EXT_RETAIL , SUM(COST) SUM_COST, AVG(COST) COST , SUM(EXT_COST) EXT_COST , MIN(RESERVED_QTY) RESERVE , AVG(RTL_PRICE) AMT_ITEM_PRICE , PARENT_UPC , INBOUND_ITEM_CLASS , PROD_WT AS WEIGHT , ON_HAND.VEND_NUM VENDOR_NUM , AVG(SHIP_DIM_X) SHIP_DIM_X , AVG(SHIP_DIM_Y) SHIP_DIM_Y , AVG(SHIP_DIM_Z) SHIP_DIM_Z , DIV_NM AS DIVISION_NAME, ON_HAND.SUP_DEPT_NM AS SUPER_DEPARTMENT_NAME, ON_HAND.DEPT_NM AS DEPT, ON_HAND.CATEG_NM AS CAT, ON_HAND.SUB_CATEG_NM AS SUB_CAT, AVG(CAST(SHIP_DIM_X AS NUMERIC(38,5))* CAST(SHIP_DIM_Z AS NUMERIC(38,5))/(12*12*12)) ITEM_CUBE , AVLBL_STS AVLBL_STS, MAX(CAST(TO_CHAR(OFFR_END_TS,'YYYY-MM-DD') AS DATE)) END_DATE, ODG.SHPG_NODE_GRP_NM, MAX(IPO.LAST_RCPT_TS) LAST_RCPT_TS FROM wmt-edw-prod.WW_GEC_VM.INVT_INB_ON_HAND_DTL ON_HAND LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.SHPG_NODE_RPT_CONFIG ODG ON ON_HAND.SHIP_NODE_ORG_ID = ODG.SHPG_NODE_ORG_ID AND ODG.RPT_GRP_NM = 'SC_OUTB' LEFT JOIN (SELECT CATLG_ITEM_ID,LEGACY_SLR_ID,MIN(AVLBL_STS) AVLBL_STS, MIN(RESERVED_QTY) RESERVED_QTY FROM wmt-edw-prod.WW_GEC_VM.INVT_GLBL_AVLBL GLBL LEFT JOIN wmt-edw-prod.WW_GEC_VM.INVT_ITEM_LKP ITEM_LKP ON GLBL.PROD_OFFR_ID=ITEM_LKP.SRC_ITEM_ID LEFT JOIN (SELECT INVT_ITEM_KEY,TENANT_ORG_ID, SUM(CASE WHEN INVT_TYP_ID=30 THEN QTY ELSE 0 END ) RESERVED_QTY FROM wmt-edw-prod.WW_GEC_VM.INVT_OUTBOUND_SUMM WHERE TENANT_ORG_ID=4571 AND INVT_TYP_ID=30 GROUP BY INVT_ITEM_KEY,TENANT_ORG_ID )SUMM ON ITEM_LKP.INVT_ITEM_KEY=SUMM.INVT_ITEM_KEY WHERE GLBL.CHNL='S2H' AND GLBL.LEGACY_SLR_ID=0 GROUP BY 1,2 ) GLBL_AVAIL ON ON_HAND.CATLG_ITEM_ID=GLBL_AVAIL.CATLG_ITEM_ID LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.INVT_INBOUND_ON_HAND IOH ON IOH.SHIP_NODE_ORG_ID  =ON_HAND.SHIP_NODE_ORG_ID AND IOH.REPL_STORE_ORG_ID=ON_HAND.REPL_STORE_ORG_ID AND IOH.UPC              =ON_HAND.UPC AND IOH.RPT_DT           =ON_HAND.RPT_DT LEFT JOIN (SELECT END_SHIP_NODE_ORG_ID,  UPC, MAX(LAST_RCPT_TS)LAST_RCPT_TS FROM wmt-edw-prod.WW_GEC_VM.INVT_INB_PO_OO_RDC_QTY WHERE LAST_RCPT_TS IS NOT NULL GROUP BY 1,2) IPO ON IPO.END_SHIP_NODE_ORG_ID =ON_HAND.SHIP_NODE_ORG_ID AND IPO.UPC= ON_HAND.UPC WHERE ON_HAND.RPT_DT  =CURRENT_DATE - 1 GROUP BY ON_HAND.SHIP_NODE, ON_HAND.STORE_NUM , PROD_KEY , ON_HAND.CATLG_ITEM_ID, ON_HAND.WM_ITEM_NUM, ON_HAND.UPC , IOH.PARENT_CHILD_FLAG , ON_HAND.PROD_NM, ON_HAND.STYLE_ID_NUM , COLOR, SIZE, PARENT_UPC , INBOUND_ITEM_CLASS , PROD_WT , ON_HAND.VEND_NUM , DIV_NM, ON_HAND.SUP_DEPT_NM, ON_HAND.DEPT_NM, ON_HAND.CATEG_NM, ON_HAND.SUB_CATEG_NM, AVLBL_STS, ODG.SHPG_NODE_GRP_NM ) AS Y LEFT JOIN wmt-edw-prod.WW_GEC_VM.PROD_TRANSIENT_MASTER PTM ON PTM.PROD_KEY = Y.PROD_KEY LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.PROD DI ON DI.CATLG_ITEM_ID = Y.ITEM_ID AND DI.PROD_KEY=Y.PROD_KEY LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.PROD_LIFECYCLE_STS_TRK PDST ON PDST.CATLG_ITEM_ID = Y.ITEM_ID LEFT OUTER JOIN wmt-edw-prod.WW_GEC_VM.OFFR_LIFECYCLE_STS_LKP DSL ON DSL.OFFR_LIFECYCLE_STS_ID = PDST.PROD_LIFECYCLE_STS_ID GROUP BY Y.FACILITY_ID , Y.STORE_NUM, Y.VENDOR_NUM , Y.UPC , IS_PARENT , Y.ITEM_ID , Y.WM_ITEM_NUM, Y.PARENT_UPC , Y.DESCRIPTION , Y.STYLE_ID_NUM , Y.COLOR, Y.SIZE, Y.DIVISION_NAME , Y.SUPER_DEPARTMENT_NAME , Y.DEPT , Y.CAT, Y.SUB_CAT , Y.AMT_ITEM_PRICE , Y.INBOUND_ITEM_CLASS , Y.WEIGHT , PTM.S2S_IND , PTM.S2S_ACTV_IND , PTM.BACKHAUL_ELIG_IND , Y.END_DATE , PTM.REPLENISHABLE_IND, DSL.OFFR_LIFECYCLE_STS_DESC, Y.AVLBL_STS, Y.SHPG_NODE_GRP_NM, Y.LAST_RCPT_TS) AS Y1";
		String query=SelectionParser.query;
		

	}
	
}
